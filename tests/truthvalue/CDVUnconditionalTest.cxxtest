/*
 * Copyright (C) 2018 Singularity
 * All Rights Reserved
 *
 * Written by Roman Treutlein
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <math.h>

#include <opencog/truthvalue/DistributionalValue.h>
#include <opencog/truthvalue/ConditionalDV.h>
#include <opencog/util/Logger.h>
#include <opencog/util/exceptions.h>

using namespace opencog;

class CDVUnconditionalTest :  public CxxTest::TestSuite
{
private:

	ConditionalDVPtr cdv;
	DistributionalValuePtr dv;
	DVKey key;

public:
    CDVUnconditionalTest()
    {
    }

    void setUp()
    {
		DVKey key11{Interval{0.0 ,0.25}};
	    DVKey key12{Interval{0.25,0.5 }};
		DVKey key13{Interval{0.5 ,0.75}};
		DVKey key14{Interval{0.75,1.0 }};

		DVKey key21{Interval{0.0 ,0.33}};
		DVKey key22{Interval{0.33,0.66}};
		DVKey key23{Interval{0.66,1.0 }};

		DVKey key31{Interval{0.0,0.5}};
		DVKey key32{Interval{0.5,1.0}};

		key = key11;

		DVCounter dvc;
		dvc[key21] = 0;
		dvc[key22] = 10;
		dvc[key23] = 20;

		dv = DistributionalValue::createDV(dvc);

		DVCounter dvc1;
		dvc1[key11] = 10;
		dvc1[key12] = 10;
		dvc1[key13] = 0;
		dvc1[key14] = 0;

		DVCounter dvc2;
		dvc2[key11] = 0;
		dvc2[key12] = 0;
		dvc2[key13] = 10;
		dvc2[key14] = 10;

		CDVrep rep;
		rep[key31] = dvc1;
		rep[key32] = dvc2;

		cdv = ConditionalDV::createCDV(rep);
    }

    void tearDown() {}

    void testUncoditonal()
    {
		DistributionalValuePtr dvres = cdv->get_unconditional(dv);
		std::cout << std::endl << dvres->to_string() << std::endl;
		dvres = cdv->get_unconditional(key);
		std::cout << std::endl << dvres->to_string() << std::endl;
    }

};
