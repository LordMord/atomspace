/*
 * Copyright (C) 2019 SingularityNet
 * All Rights Reserved
 *
 * Written by Roman Treutlein <roman@singularitynet.io>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <math.h>

#include <opencog/atoms/distvalue/Interval.h>
#include <opencog/util/Logger.h>
#include <opencog/util/exceptions.h>

using namespace opencog;
using namespace interval;

class IntervalTest :  public CxxTest::TestSuite
{
private:

public:
	IntervalTest() {}

	void setUp() {}

	void tearDown() {}

	void testConditionalProbabilty()
	{
		NBin bin1{Bin{0.0,0.25}};
		NBin bin2{Bin{0.0,0.5 }};
		NBin bin3{Bin{0.6,0.75}};
		NBin bin4{Bin{0.3,0.3}};
		NBin bin5{Bin{0.5,0.5}};
		NBin bin6{Bin{0.0,0.5},Bin{0.5,1.0}};
		NBin bin7{Bin{0.0,0.3},Bin{0.0,0.3}};
		NBin bin8{Bin{0.0,0.25},Bin{0.75,1.0}};

		double r1 = conditional_probability(bin1,bin2);
		TS_ASSERT_EQUALS(r1, 1.0);
		double r2 = conditional_probability(bin2,bin1);
		TS_ASSERT_EQUALS(r2, 0.5);
		double r3 = conditional_probability(bin1,bin3);
		TS_ASSERT_EQUALS(r3, 0);
		double r4 = conditional_probability(bin2,bin4);
		TS_ASSERT_EQUALS(r4, 0);
		double r5 = conditional_probability(bin4,bin2);
		TS_ASSERT_EQUALS(r5, 1);
		double r6 = conditional_probability(bin4,bin4);
		TS_ASSERT_EQUALS(r6, 1);
		double r7 = conditional_probability(bin4,bin5);
		TS_ASSERT_EQUALS(r7, 0);
		double r8 = conditional_probability(bin6,bin8);
		TS_ASSERT_EQUALS(r8, 0.25);
		double r9 = conditional_probability(bin6,bin7);
		TS_ASSERT_EQUALS(r9, 0);

		TS_ASSERT_THROWS(conditional_probability(bin6,bin5),RuntimeException)
	}

	void testIntersect()
	{
		NBin bin1{Bin{0.0,0.5},Bin{0.5,1.0}};
		NBin bin2{Bin{0.0,0.25},Bin{0.4,0.6}};
		NBin bin3{Bin{0.0,0.25},Bin{0.5,0.6}};
		NBin bin4{EMPTY_INTERVAL,Bin{0.5,0.6}};

		NBin is1 = intersect(bin1,bin2);
		TS_ASSERT_EQUALS(is1,bin3);
		NBin is2 = intersect(bin4,bin2);
		TS_ASSERT(is_empty(is2));

	}
};
