/*
 * Copyright (C) 2018 SingularityNet
 * All Rights Reserved
 *
 * Written by Roman Treutlein <roman@singularitynet.io>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <math.h>

#include <opencog/atoms/distvalue/DistributionalValue.h>
#include <opencog/util/Logger.h>
#include <opencog/util/exceptions.h>

using namespace opencog;

class DVTest :  public CxxTest::TestSuite
{
private:
	DistributionalValuePtr dvs[3];
	DVec keys[11];

public:
	DVTest()
	{
	}

	void setUp()
	{
		keys[0] = DVec{0.125};
		keys[1] = DVec{0.375};
		keys[2] = DVec{0.625};
		keys[3] = DVec{0.875};

		keys[4] = DVec{0.15};
		keys[5] = DVec{0.5};
		keys[6] = DVec{0.85};

		keys[7] = DVec{0.25};
		keys[8] = DVec{0.75};

		CHist<double> hist0 = CHist<double>(3,1);
		hist0.insert(keys[5],10);
		hist0.insert(keys[6],20);

		dvs[0] = DistributionalValue::createDV(hist0);

		CHist<double> hist1 = CHist<double>(3,1);
		hist1.insert(keys[0],30);
		hist1.insert(keys[1],30);

		dvs[1] = DistributionalValue::createDV(hist1);

		CHist<double> hist2 = CHist<double>(3,1);
		hist2.insert(keys[2],30);
		hist2.insert(keys[3],30);

		dvs[2] = DistributionalValue::createDV(hist2);
	}

	void tearDown() {}

	void testMean()
	{
		std::cout << "Test Mean:\n" << std::flush;
		DVec m = dvs[0]->bin_means();
		TS_ASSERT_EQUALS(m[0], 1.0/3.0);
		TS_ASSERT_EQUALS(m[1], 2.0/3.0);
	}

	void testMode()
	{
		DVec m = dvs[0]->bin_modes();
		TS_ASSERT_EQUALS(m[0], 9.0/28.0);
		TS_ASSERT_EQUALS(m[1], 19.0/28.0);
	}
};
